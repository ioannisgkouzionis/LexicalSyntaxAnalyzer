Terminals unused in grammar

   DATATYPE_CASTING
   OP
   SEMICOLON


State 27 conflicts: 2 shift/reduce
State 30 conflicts: 2 shift/reduce
State 58 conflicts: 2 shift/reduce
State 64 conflicts: 2 shift/reduce
State 65 conflicts: 2 shift/reduce
State 66 conflicts: 2 shift/reduce
State 67 conflicts: 2 shift/reduce
State 68 conflicts: 2 shift/reduce
State 75 conflicts: 2 shift/reduce
State 81 conflicts: 2 shift/reduce, 1 reduce/reduce
State 82 conflicts: 2 shift/reduce
State 98 conflicts: 2 shift/reduce
State 99 conflicts: 2 shift/reduce
State 100 conflicts: 2 shift/reduce
State 101 conflicts: 2 shift/reduce
State 102 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 106 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 2 shift/reduce
State 110 conflicts: 2 shift/reduce
State 111 conflicts: 2 shift/reduce
State 112 conflicts: 2 shift/reduce
State 113 conflicts: 2 shift/reduce
State 114 conflicts: 2 shift/reduce
State 116 conflicts: 2 shift/reduce
State 119 conflicts: 2 shift/reduce
State 128 conflicts: 2 shift/reduce
State 159 conflicts: 2 shift/reduce
State 160 conflicts: 2 shift/reduce
State 164 conflicts: 2 shift/reduce
State 180 conflicts: 2 shift/reduce
State 186 conflicts: 1 shift/reduce
State 193 conflicts: 2 shift/reduce
State 194 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program_decl variables proc_func_decl proc_body OP_DOT

    2 program_decl: KW_PROGRAM id OP_SEMICOLON

    3 id: IDENT

    4 pos_int: POSINT

    5 real_num: REAL

    6 Str: STRING

    7 bool_const: BOOLEAN_CONSTANT

    8 all_data_types: %empty
    9               | data_Type
   10               | array_1_or_multi_dimension

   11 array_1_or_multi_dimension: KW_ARRAY dimension KW_OF data_Type
   12                           | KW_ARRAY dimension KW_OF id

   13 dimension: %empty
   14          | OP_LEFT_BRACKET temp_type OP_RIGHT_BRACKET dimension

   15 temp_type: id
   16          | pos_int

   17 data_Type: KW_INTEGER
   18          | KW_BOOLEAN
   19          | KW_CHAR
   20          | KW_REAL

   21 proc_call: id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2

   22 arguments: %empty
   23          | arglist

   24 arglist: proc_expr
   25        | arglist OP_COMMA proc_expr

   26 variables: %empty
   27          | KW_VAR id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 variables

   28 variables2: %empty
   29           | OP_COMMA id variables2

   30 variables3: %empty
   31           | id variables2 OP_COLON all_data_types OP_SEMICOLON variables3

   32 proc_func_decl: %empty
   33               | KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   34               | KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

   35 proc_var_args: %empty
   36              | id variables2 OP_COLON all_data_types proc_var_args
   37              | id variables2 OP_COLON all_data_types OP_SEMICOLON proc_var_args
   38              | id variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args

   39 proc_body: KW_BEGIN proc_statements KW_END

   40 proc_statements: %empty
   41                | proc_statement_list

   42 proc_statement_list: proc_statement
   43                    | proc_statement_list OP_SEMICOLON proc_statement

   44 proc_statement: command_assignment
   45               | command_result
   46               | proc_call
   47               | command_repeat
   48               | command_while
   49               | command_for
   50               | command_if
   51               | command_return
   52               | command_goto
   53               | goto_label

   54 proc_statement_2: proc_body
   55                 | proc_statement

   56 command_if: KW_IF proc_expr KW_THEN proc_statement_2
   57           | KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2

   58 command_repeat: KW_REPEAT proc_statement_2 KW_UNTIL proc_expr

   59 command_while: KW_WHILE proc_expr KW_DO proc_statement_2

   60 command_goto: KW_GOTO id

   61 command_return: KW_RETURN

   62 command_assignment: id proc_expr_type3 OP_ASSIGNMENT proc_expr

   63 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2

   65 goto_label: id OP_COLON label

   66 command_result: KW_RESULT OP_ASSIGNMENT proc_expr

   67 label: %empty
   68      | proc_body
   69      | proc_statement

   70 proc_expr: %empty
   71          | Str
   72          | pos_int
   73          | real_num
   74          | bool_const
   75          | id
   76          | OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | proc_expr OP_PLUS proc_expr
   78          | proc_expr OP_MINUS proc_expr
   79          | proc_expr OP_MULT proc_expr
   80          | proc_expr OP_DIVIDE proc_expr
   81          | proc_expr KW_DIV proc_expr
   82          | proc_expr KW_MOD proc_expr
   83          | proc_expr OP_LOGICAL_AND proc_expr
   84          | proc_expr KW_AND proc_expr
   85          | proc_expr OP_LOGICAL_OR proc_expr
   86          | proc_expr KW_OR proc_expr
   87          | proc_expr OP_EQUAL proc_expr
   88          | proc_expr OP_BIGGER proc_expr
   89          | proc_expr OP_SMALLER proc_expr
   90          | proc_expr OP_DIFFERENT proc_expr
   91          | proc_expr OP_BIGGER_EQUAL proc_expr
   92          | proc_expr OP_SMALLER_EQUAL proc_expr
   93          | OP_LOGICAL_NOT proc_expr
   94          | KW_NOT proc_expr
   95          | OP_PLUS proc_expr
   96          | OP_MINUS proc_expr
   97          | id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

   99 proc_expr_type1: proc_expr
  100                | proc_expr_type1 OP_COMMA proc_expr_type1

  101 proc_expr_type2: %empty
  102                | OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2

  103 proc_expr_type3: %empty
  104                | OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3


Terminals, with rules where they appear

$end (0) 0
error (256)
KW_PROGRAM (300) 2
KW_BEGIN (301) 39
KW_END (302) 39
KW_AND (308) 84
KW_DIV (309) 81
KW_FUNCTION (310) 34
KW_MOD (311) 82
KW_PROC (312) 33
KW_RESULT (313) 66
KW_ARRAY (314) 11 12
KW_DO (315) 59 63 64
KW_GOTO (316) 60
KW_NOT (317) 94
KW_RETURN (318) 61
KW_BOOLEAN (319) 18
KW_ELSE (320) 57
KW_IF (321) 56 57
KW_OF (322) 11 12
KW_REAL (323) 20
KW_THEN (324) 56 57
KW_CHAR (325) 19
KW_FOR (326) 63 64
KW_INTEGER (327) 17
KW_OR (328) 86
KW_REPEAT (329) 58
KW_UNTIL (330) 58
KW_VAR (331) 27
KW_WHILE (332) 59
KW_TO (333) 63
KW_DOWNTO (334) 64
OP_ASSIGNMENT (336) 62 63 64 66
OP_PLUS (337) 77 95
OP_MINUS (338) 78 96
OP_MULT (339) 79
OP_DIVIDE (340) 80
OP_BIGGER (341) 88
OP_SMALLER (342) 89
OP_DIFFERENT (343) 90
OP_EQUAL (344) 87
OP_SEMICOLON (345) 2 27 31 33 34 37 38 43
OP_DOT (346) 1
OP_COMMA (347) 25 29 100
OP_COLON (348) 27 31 34 36 37 38 65
OP_SMALLER_EQUAL (349) 92
OP_BIGGER_EQUAL (351) 91
OP_LOGICAL_NOT (352) 93
OP_LOGICAL_AND (353) 83
OP_LOGICAL_OR (354) 85
OP_LEFT_PARENTHESIS (355) 21 33 34 76 97 102
OP_RIGHT_PARENTHESIS (356) 21 33 34 38 76 97 102
OP_LEFT_BRACKET (357) 14 98 104
OP_RIGHT_BRACKET (358) 14 98 104
IDENT (360) 3
POSINT (361) 4
REAL (362) 5
STRING (363) 6
BOOLEAN_CONSTANT (364) 7
DATATYPE_CASTING (365)
OP (366)
SEMICOLON (367)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
program (64)
    on left: 1, on right: 0
program_decl (65)
    on left: 2, on right: 1
id (66)
    on left: 3, on right: 2 12 15 21 27 29 31 33 34 36 37 38 60 62
    63 64 65 75 97 98
pos_int (67)
    on left: 4, on right: 16 72
real_num (68)
    on left: 5, on right: 73
Str (69)
    on left: 6, on right: 71
bool_const (70)
    on left: 7, on right: 74
all_data_types (71)
    on left: 8 9 10, on right: 27 31 34 36 37 38
array_1_or_multi_dimension (72)
    on left: 11 12, on right: 10
dimension (73)
    on left: 13 14, on right: 11 12 14
temp_type (74)
    on left: 15 16, on right: 14
data_Type (75)
    on left: 17 18 19 20, on right: 9 11
proc_call (76)
    on left: 21, on right: 46
arguments (77)
    on left: 22 23, on right: 21
arglist (78)
    on left: 24 25, on right: 23 25
variables (79)
    on left: 26 27, on right: 1 27 33 34
variables2 (80)
    on left: 28 29, on right: 27 29 31 36 37 38
variables3 (81)
    on left: 30 31, on right: 27 31
proc_func_decl (82)
    on left: 32 33 34, on right: 1 33 34
proc_var_args (83)
    on left: 35 36 37 38, on right: 33 34 36 37 38
proc_body (84)
    on left: 39, on right: 1 33 34 54 68
proc_statements (85)
    on left: 40 41, on right: 39
proc_statement_list (86)
    on left: 42 43, on right: 41 43
proc_statement (87)
    on left: 44 45 46 47 48 49 50 51 52 53, on right: 42 43 55 69
proc_statement_2 (88)
    on left: 54 55, on right: 56 57 58 59 63 64
command_if (89)
    on left: 56 57, on right: 50
command_repeat (90)
    on left: 58, on right: 47
command_while (91)
    on left: 59, on right: 48
command_goto (92)
    on left: 60, on right: 52
command_return (93)
    on left: 61, on right: 51
command_assignment (94)
    on left: 62, on right: 44
command_for (95)
    on left: 63 64, on right: 49
goto_label (96)
    on left: 65, on right: 53
command_result (97)
    on left: 66, on right: 45
label (98)
    on left: 67 68 69, on right: 65
proc_expr (99)
    on left: 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
    88 89 90 91 92 93 94 95 96 97 98, on right: 24 25 56 57 58 59 62
    63 64 66 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93
    94 95 96 98 99 104
proc_expr_type1 (100)
    on left: 99 100, on right: 63 64 97 100 102
proc_expr_type2 (101)
    on left: 101 102, on right: 21 97 102
proc_expr_type3 (102)
    on left: 103 104, on right: 62 98 104


State 0

    0 $accept: . program $end
    1 program: . program_decl variables proc_func_decl proc_body OP_DOT
    2 program_decl: . KW_PROGRAM id OP_SEMICOLON

    KW_PROGRAM  shift, and go to state 1

    program       go to state 2
    program_decl  go to state 3


State 1

    2 program_decl: KW_PROGRAM . id OP_SEMICOLON
    3 id: . IDENT

    IDENT  shift, and go to state 4

    id  go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: program_decl . variables proc_func_decl proc_body OP_DOT
   26 variables: . %empty  [KW_BEGIN, KW_FUNCTION, KW_PROC]
   27          | . KW_VAR id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 variables

    KW_VAR  shift, and go to state 7

    $default  reduce using rule 26 (variables)

    variables  go to state 8


State 4

    3 id: IDENT .

    $default  reduce using rule 3 (id)


State 5

    2 program_decl: KW_PROGRAM id . OP_SEMICOLON

    OP_SEMICOLON  shift, and go to state 9


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 id: . IDENT
   27 variables: KW_VAR . id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 variables

    IDENT  shift, and go to state 4

    id  go to state 10


State 8

    1 program: program_decl variables . proc_func_decl proc_body OP_DOT
   32 proc_func_decl: . %empty  [KW_BEGIN]
   33               | . KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   34               | . KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    KW_FUNCTION  shift, and go to state 11
    KW_PROC      shift, and go to state 12

    $default  reduce using rule 32 (proc_func_decl)

    proc_func_decl  go to state 13


State 9

    2 program_decl: KW_PROGRAM id OP_SEMICOLON .

    $default  reduce using rule 2 (program_decl)


State 10

   27 variables: KW_VAR id . variables2 OP_COLON all_data_types OP_SEMICOLON variables3 variables
   28 variables2: . %empty  [OP_COLON]
   29           | . OP_COMMA id variables2

    OP_COMMA  shift, and go to state 14

    $default  reduce using rule 28 (variables2)

    variables2  go to state 15


State 11

    3 id: . IDENT
   34 proc_func_decl: KW_FUNCTION . id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    IDENT  shift, and go to state 4

    id  go to state 16


State 12

    3 id: . IDENT
   33 proc_func_decl: KW_PROC . id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    IDENT  shift, and go to state 4

    id  go to state 17


State 13

    1 program: program_decl variables proc_func_decl . proc_body OP_DOT
   39 proc_body: . KW_BEGIN proc_statements KW_END

    KW_BEGIN  shift, and go to state 18

    proc_body  go to state 19


State 14

    3 id: . IDENT
   29 variables2: OP_COMMA . id variables2

    IDENT  shift, and go to state 4

    id  go to state 20


State 15

   27 variables: KW_VAR id variables2 . OP_COLON all_data_types OP_SEMICOLON variables3 variables

    OP_COLON  shift, and go to state 21


State 16

   34 proc_func_decl: KW_FUNCTION id . OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    OP_LEFT_PARENTHESIS  shift, and go to state 22


State 17

   33 proc_func_decl: KW_PROC id . OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    OP_LEFT_PARENTHESIS  shift, and go to state 23


State 18

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   39 proc_body: KW_BEGIN . proc_statements KW_END
   40 proc_statements: . %empty  [KW_END]
   41                | . proc_statement_list
   42 proc_statement_list: . proc_statement
   43                    | . proc_statement_list OP_SEMICOLON proc_statement
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   65 goto_label: . id OP_COLON label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr

    IDENT      shift, and go to state 4
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    $default  reduce using rule 40 (proc_statements)

    id                   go to state 31
    proc_call            go to state 32
    proc_statements      go to state 33
    proc_statement_list  go to state 34
    proc_statement       go to state 35
    command_if           go to state 36
    command_repeat       go to state 37
    command_while        go to state 38
    command_goto         go to state 39
    command_return       go to state 40
    command_assignment   go to state 41
    command_for          go to state 42
    goto_label           go to state 43
    command_result       go to state 44


State 19

    1 program: program_decl variables proc_func_decl proc_body . OP_DOT

    OP_DOT  shift, and go to state 45


State 20

   28 variables2: . %empty  [OP_COLON]
   29           | . OP_COMMA id variables2
   29           | OP_COMMA id . variables2

    OP_COMMA  shift, and go to state 14

    $default  reduce using rule 28 (variables2)

    variables2  go to state 46


State 21

    8 all_data_types: . %empty  [OP_SEMICOLON]
    9               | . data_Type
   10               | . array_1_or_multi_dimension
   11 array_1_or_multi_dimension: . KW_ARRAY dimension KW_OF data_Type
   12                           | . KW_ARRAY dimension KW_OF id
   17 data_Type: . KW_INTEGER
   18          | . KW_BOOLEAN
   19          | . KW_CHAR
   20          | . KW_REAL
   27 variables: KW_VAR id variables2 OP_COLON . all_data_types OP_SEMICOLON variables3 variables

    KW_ARRAY    shift, and go to state 47
    KW_BOOLEAN  shift, and go to state 48
    KW_REAL     shift, and go to state 49
    KW_CHAR     shift, and go to state 50
    KW_INTEGER  shift, and go to state 51

    $default  reduce using rule 8 (all_data_types)

    all_data_types              go to state 52
    array_1_or_multi_dimension  go to state 53
    data_Type                   go to state 54


State 22

    3 id: . IDENT
   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS . proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   35 proc_var_args: . %empty  [OP_RIGHT_PARENTHESIS]
   36              | . id variables2 OP_COLON all_data_types proc_var_args
   37              | . id variables2 OP_COLON all_data_types OP_SEMICOLON proc_var_args
   38              | . id variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args

    IDENT  shift, and go to state 4

    $default  reduce using rule 35 (proc_var_args)

    id             go to state 55
    proc_var_args  go to state 56


State 23

    3 id: . IDENT
   33 proc_func_decl: KW_PROC id OP_LEFT_PARENTHESIS . proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   35 proc_var_args: . %empty  [OP_RIGHT_PARENTHESIS]
   36              | . id variables2 OP_COLON all_data_types proc_var_args
   37              | . id variables2 OP_COLON all_data_types OP_SEMICOLON proc_var_args
   38              | . id variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args

    IDENT  shift, and go to state 4

    $default  reduce using rule 35 (proc_var_args)

    id             go to state 55
    proc_var_args  go to state 57


State 24

   66 command_result: KW_RESULT . OP_ASSIGNMENT proc_expr

    OP_ASSIGNMENT  shift, and go to state 58


State 25

    3 id: . IDENT
   60 command_goto: KW_GOTO . id

    IDENT  shift, and go to state 4

    id  go to state 59


State 26

   61 command_return: KW_RETURN .

    $default  reduce using rule 61 (command_return)


State 27

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   56 command_if: KW_IF . proc_expr KW_THEN proc_statement_2
   57           | KW_IF . proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_AND, KW_DIV, KW_MOD, KW_THEN, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 74


State 28

    3 id: . IDENT
   63 command_for: KW_FOR . id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | KW_FOR . id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2

    IDENT  shift, and go to state 4

    id  go to state 75


State 29

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   39 proc_body: . KW_BEGIN proc_statements KW_END
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   54 proc_statement_2: . proc_body
   55                 | . proc_statement
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   58               | KW_REPEAT . proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   65 goto_label: . id OP_COLON label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr

    IDENT      shift, and go to state 4
    KW_BEGIN   shift, and go to state 18
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    id                  go to state 31
    proc_call           go to state 32
    proc_body           go to state 76
    proc_statement      go to state 77
    proc_statement_2    go to state 78
    command_if          go to state 36
    command_repeat      go to state 37
    command_while       go to state 38
    command_goto        go to state 39
    command_return      go to state 40
    command_assignment  go to state 41
    command_for         go to state 42
    goto_label          go to state 43
    command_result      go to state 44


State 30

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   59 command_while: KW_WHILE . proc_expr KW_DO proc_statement_2
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 79


State 31

   21 proc_call: id . OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   62 command_assignment: id . proc_expr_type3 OP_ASSIGNMENT proc_expr
   65 goto_label: id . OP_COLON label
  103 proc_expr_type3: . %empty  [OP_ASSIGNMENT]
  104                | . OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    OP_COLON             shift, and go to state 80
    OP_LEFT_PARENTHESIS  shift, and go to state 81
    OP_LEFT_BRACKET      shift, and go to state 82

    $default  reduce using rule 103 (proc_expr_type3)

    proc_expr_type3  go to state 83


State 32

   46 proc_statement: proc_call .

    $default  reduce using rule 46 (proc_statement)


State 33

   39 proc_body: KW_BEGIN proc_statements . KW_END

    KW_END  shift, and go to state 84


State 34

   41 proc_statements: proc_statement_list .  [KW_END]
   43 proc_statement_list: proc_statement_list . OP_SEMICOLON proc_statement

    OP_SEMICOLON  shift, and go to state 85

    $default  reduce using rule 41 (proc_statements)


State 35

   42 proc_statement_list: proc_statement .

    $default  reduce using rule 42 (proc_statement_list)


State 36

   50 proc_statement: command_if .

    $default  reduce using rule 50 (proc_statement)


State 37

   47 proc_statement: command_repeat .

    $default  reduce using rule 47 (proc_statement)


State 38

   48 proc_statement: command_while .

    $default  reduce using rule 48 (proc_statement)


State 39

   52 proc_statement: command_goto .

    $default  reduce using rule 52 (proc_statement)


State 40

   51 proc_statement: command_return .

    $default  reduce using rule 51 (proc_statement)


State 41

   44 proc_statement: command_assignment .

    $default  reduce using rule 44 (proc_statement)


State 42

   49 proc_statement: command_for .

    $default  reduce using rule 49 (proc_statement)


State 43

   53 proc_statement: goto_label .

    $default  reduce using rule 53 (proc_statement)


State 44

   45 proc_statement: command_result .

    $default  reduce using rule 45 (proc_statement)


State 45

    1 program: program_decl variables proc_func_decl proc_body OP_DOT .

    $default  reduce using rule 1 (program)


State 46

   29 variables2: OP_COMMA id variables2 .

    $default  reduce using rule 29 (variables2)


State 47

   11 array_1_or_multi_dimension: KW_ARRAY . dimension KW_OF data_Type
   12                           | KW_ARRAY . dimension KW_OF id
   13 dimension: . %empty  [KW_OF]
   14          | . OP_LEFT_BRACKET temp_type OP_RIGHT_BRACKET dimension

    OP_LEFT_BRACKET  shift, and go to state 86

    $default  reduce using rule 13 (dimension)

    dimension  go to state 87


State 48

   18 data_Type: KW_BOOLEAN .

    $default  reduce using rule 18 (data_Type)


State 49

   20 data_Type: KW_REAL .

    $default  reduce using rule 20 (data_Type)


State 50

   19 data_Type: KW_CHAR .

    $default  reduce using rule 19 (data_Type)


State 51

   17 data_Type: KW_INTEGER .

    $default  reduce using rule 17 (data_Type)


State 52

   27 variables: KW_VAR id variables2 OP_COLON all_data_types . OP_SEMICOLON variables3 variables

    OP_SEMICOLON  shift, and go to state 88


State 53

   10 all_data_types: array_1_or_multi_dimension .

    $default  reduce using rule 10 (all_data_types)


State 54

    9 all_data_types: data_Type .

    $default  reduce using rule 9 (all_data_types)


State 55

   28 variables2: . %empty  [OP_COLON]
   29           | . OP_COMMA id variables2
   36 proc_var_args: id . variables2 OP_COLON all_data_types proc_var_args
   37              | id . variables2 OP_COLON all_data_types OP_SEMICOLON proc_var_args
   38              | id . variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args

    OP_COMMA  shift, and go to state 14

    $default  reduce using rule 28 (variables2)

    variables2  go to state 89


State 56

   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args . OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    OP_RIGHT_PARENTHESIS  shift, and go to state 90


State 57

   33 proc_func_decl: KW_PROC id OP_LEFT_PARENTHESIS proc_var_args . OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    OP_RIGHT_PARENTHESIS  shift, and go to state 91


State 58

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   66 command_result: KW_RESULT OP_ASSIGNMENT . proc_expr
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_END, KW_AND, KW_DIV, KW_MOD, KW_ELSE, KW_OR, KW_UNTIL]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 92


State 59

   60 command_goto: KW_GOTO id .

    $default  reduce using rule 60 (command_goto)


State 60

    4 pos_int: POSINT .

    $default  reduce using rule 4 (pos_int)


State 61

    5 real_num: REAL .

    $default  reduce using rule 5 (real_num)


State 62

    6 Str: STRING .

    $default  reduce using rule 6 (Str)


State 63

    7 bool_const: BOOLEAN_CONSTANT .

    $default  reduce using rule 7 (bool_const)


State 64

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   95          | OP_PLUS . proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 93


State 65

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   96          | OP_MINUS . proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 94


State 66

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   93          | OP_LOGICAL_NOT . proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 95


State 67

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   76          | OP_LEFT_PARENTHESIS . proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 96


State 68

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   94          | KW_NOT . proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 97


State 69

   75 proc_expr: id .  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   97          | id . OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | id . OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    OP_LEFT_PARENTHESIS  shift, and go to state 98
    OP_LEFT_BRACKET      shift, and go to state 99

    $default  reduce using rule 75 (proc_expr)


State 70

   72 proc_expr: pos_int .

    $default  reduce using rule 72 (proc_expr)


State 71

   73 proc_expr: real_num .

    $default  reduce using rule 73 (proc_expr)


State 72

   71 proc_expr: Str .

    $default  reduce using rule 71 (proc_expr)


State 73

   74 proc_expr: bool_const .

    $default  reduce using rule 74 (proc_expr)


State 74

   56 command_if: KW_IF proc_expr . KW_THEN proc_statement_2
   57           | KW_IF proc_expr . KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_THEN           shift, and go to state 115
    KW_OR             shift, and go to state 116


State 75

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   63 command_for: KW_FOR id . proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | KW_FOR id . proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3
   99 proc_expr_type1: . proc_expr
  100                | . proc_expr_type1 OP_COMMA proc_expr_type1

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id               go to state 69
    pos_int          go to state 70
    real_num         go to state 71
    Str              go to state 72
    bool_const       go to state 73
    proc_expr        go to state 117
    proc_expr_type1  go to state 118


State 76

   54 proc_statement_2: proc_body .

    $default  reduce using rule 54 (proc_statement_2)


State 77

   55 proc_statement_2: proc_statement .

    $default  reduce using rule 55 (proc_statement_2)


State 78

   58 command_repeat: KW_REPEAT proc_statement_2 . KW_UNTIL proc_expr

    KW_UNTIL  shift, and go to state 119


State 79

   59 command_while: KW_WHILE proc_expr . KW_DO proc_statement_2
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_DO             shift, and go to state 120
    KW_OR             shift, and go to state 116


State 80

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   39 proc_body: . KW_BEGIN proc_statements KW_END
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   65 goto_label: . id OP_COLON label
   65           | id OP_COLON . label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr
   67 label: . %empty  [OP_SEMICOLON, KW_END, KW_ELSE, KW_UNTIL]
   68      | . proc_body
   69      | . proc_statement

    IDENT      shift, and go to state 4
    KW_BEGIN   shift, and go to state 18
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    $default  reduce using rule 67 (label)

    id                  go to state 31
    proc_call           go to state 32
    proc_body           go to state 121
    proc_statement      go to state 122
    command_if          go to state 36
    command_repeat      go to state 37
    command_while       go to state 38
    command_goto        go to state 39
    command_return      go to state 40
    command_assignment  go to state 41
    command_for         go to state 42
    goto_label          go to state 43
    command_result      go to state 44
    label               go to state 123


State 81

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   21 proc_call: id OP_LEFT_PARENTHESIS . arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   22 arguments: . %empty  [OP_RIGHT_PARENTHESIS]
   23          | . arglist
   24 arglist: . proc_expr
   25        | . arglist OP_COMMA proc_expr
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS               [reduce using rule 70 (proc_expr)]
    OP_MINUS              [reduce using rule 70 (proc_expr)]
    OP_RIGHT_PARENTHESIS  reduce using rule 22 (arguments)
    OP_RIGHT_PARENTHESIS  [reduce using rule 70 (proc_expr)]
    $default              reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    arguments   go to state 124
    arglist     go to state 125
    proc_expr   go to state 126


State 82

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_BRACKET, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3
  104 proc_expr_type3: OP_LEFT_BRACKET . proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 127


State 83

   62 command_assignment: id proc_expr_type3 . OP_ASSIGNMENT proc_expr

    OP_ASSIGNMENT  shift, and go to state 128


State 84

   39 proc_body: KW_BEGIN proc_statements KW_END .

    $default  reduce using rule 39 (proc_body)


State 85

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   43 proc_statement_list: proc_statement_list OP_SEMICOLON . proc_statement
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   65 goto_label: . id OP_COLON label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr

    IDENT      shift, and go to state 4
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    id                  go to state 31
    proc_call           go to state 32
    proc_statement      go to state 129
    command_if          go to state 36
    command_repeat      go to state 37
    command_while       go to state 38
    command_goto        go to state 39
    command_return      go to state 40
    command_assignment  go to state 41
    command_for         go to state 42
    goto_label          go to state 43
    command_result      go to state 44


State 86

    3 id: . IDENT
    4 pos_int: . POSINT
   14 dimension: OP_LEFT_BRACKET . temp_type OP_RIGHT_BRACKET dimension
   15 temp_type: . id
   16          | . pos_int

    IDENT   shift, and go to state 4
    POSINT  shift, and go to state 60

    id         go to state 130
    pos_int    go to state 131
    temp_type  go to state 132


State 87

   11 array_1_or_multi_dimension: KW_ARRAY dimension . KW_OF data_Type
   12                           | KW_ARRAY dimension . KW_OF id

    KW_OF  shift, and go to state 133


State 88

    3 id: . IDENT
   27 variables: KW_VAR id variables2 OP_COLON all_data_types OP_SEMICOLON . variables3 variables
   30 variables3: . %empty  [KW_BEGIN, KW_FUNCTION, KW_PROC, KW_VAR]
   31           | . id variables2 OP_COLON all_data_types OP_SEMICOLON variables3

    IDENT  shift, and go to state 4

    $default  reduce using rule 30 (variables3)

    id          go to state 134
    variables3  go to state 135


State 89

   36 proc_var_args: id variables2 . OP_COLON all_data_types proc_var_args
   37              | id variables2 . OP_COLON all_data_types OP_SEMICOLON proc_var_args
   38              | id variables2 . OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args

    OP_COLON  shift, and go to state 136


State 90

   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS . OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    OP_COLON  shift, and go to state 137


State 91

   33 proc_func_decl: KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS . OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    OP_SEMICOLON  shift, and go to state 138


State 92

   66 command_result: KW_RESULT OP_ASSIGNMENT proc_expr .  [OP_SEMICOLON, KW_END, KW_ELSE, KW_UNTIL]
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116

    $default  reduce using rule 66 (command_result)


State 93

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr
   95          | OP_PLUS proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 95 (proc_expr)

    Conflict between rule 95 and token OP_PLUS resolved as shift (%right OP_PLUS).
    Conflict between rule 95 and token OP_MINUS resolved as shift (%right OP_MINUS).
    Conflict between rule 95 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 95 and token OP_DIVIDE resolved as shift (OP_PLUS < OP_DIVIDE).
    Conflict between rule 95 and token OP_BIGGER resolved as reduce (OP_BIGGER < OP_PLUS).
    Conflict between rule 95 and token OP_SMALLER resolved as reduce (OP_SMALLER < OP_PLUS).
    Conflict between rule 95 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < OP_PLUS).
    Conflict between rule 95 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_PLUS).
    Conflict between rule 95 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < OP_PLUS).
    Conflict between rule 95 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < OP_PLUS).
    Conflict between rule 95 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_PLUS).
    Conflict between rule 95 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_PLUS).
    Conflict between rule 95 and token KW_AND resolved as reduce (KW_AND < OP_PLUS).
    Conflict between rule 95 and token KW_DIV resolved as shift (OP_PLUS < KW_DIV).
    Conflict between rule 95 and token KW_MOD resolved as shift (OP_PLUS < KW_MOD).
    Conflict between rule 95 and token KW_OR resolved as reduce (KW_OR < OP_PLUS).


State 94

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr
   96          | OP_MINUS proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 96 (proc_expr)

    Conflict between rule 96 and token OP_PLUS resolved as shift (%right OP_PLUS).
    Conflict between rule 96 and token OP_MINUS resolved as shift (%right OP_MINUS).
    Conflict between rule 96 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 96 and token OP_DIVIDE resolved as shift (OP_MINUS < OP_DIVIDE).
    Conflict between rule 96 and token OP_BIGGER resolved as reduce (OP_BIGGER < OP_MINUS).
    Conflict between rule 96 and token OP_SMALLER resolved as reduce (OP_SMALLER < OP_MINUS).
    Conflict between rule 96 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < OP_MINUS).
    Conflict between rule 96 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_MINUS).
    Conflict between rule 96 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < OP_MINUS).
    Conflict between rule 96 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < OP_MINUS).
    Conflict between rule 96 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_MINUS).
    Conflict between rule 96 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_MINUS).
    Conflict between rule 96 and token KW_AND resolved as reduce (KW_AND < OP_MINUS).
    Conflict between rule 96 and token KW_DIV resolved as shift (OP_MINUS < KW_DIV).
    Conflict between rule 96 and token KW_MOD resolved as shift (OP_MINUS < KW_MOD).
    Conflict between rule 96 and token KW_OR resolved as reduce (KW_OR < OP_MINUS).


State 95

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr
   93          | OP_LOGICAL_NOT proc_expr .  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]

    $default  reduce using rule 93 (proc_expr)

    Conflict between rule 93 and token OP_PLUS resolved as reduce (OP_PLUS < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_MINUS resolved as reduce (OP_MINUS < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_MULT resolved as reduce (OP_MULT < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_DIVIDE resolved as reduce (OP_DIVIDE < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_BIGGER resolved as reduce (OP_BIGGER < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_SMALLER resolved as reduce (OP_SMALLER < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_LOGICAL_NOT).
    Conflict between rule 93 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_LOGICAL_NOT).
    Conflict between rule 93 and token KW_AND resolved as reduce (KW_AND < OP_LOGICAL_NOT).
    Conflict between rule 93 and token KW_DIV resolved as reduce (KW_DIV < OP_LOGICAL_NOT).
    Conflict between rule 93 and token KW_MOD resolved as reduce (KW_MOD < OP_LOGICAL_NOT).
    Conflict between rule 93 and token KW_OR resolved as reduce (KW_OR < OP_LOGICAL_NOT).


State 96

   76 proc_expr: OP_LEFT_PARENTHESIS proc_expr . OP_RIGHT_PARENTHESIS
   77          | proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS               shift, and go to state 100
    OP_MINUS              shift, and go to state 101
    OP_MULT               shift, and go to state 102
    OP_DIVIDE             shift, and go to state 103
    OP_BIGGER             shift, and go to state 104
    OP_SMALLER            shift, and go to state 105
    OP_DIFFERENT          shift, and go to state 106
    OP_EQUAL              shift, and go to state 107
    OP_SMALLER_EQUAL      shift, and go to state 108
    OP_BIGGER_EQUAL       shift, and go to state 109
    OP_LOGICAL_AND        shift, and go to state 110
    OP_LOGICAL_OR         shift, and go to state 111
    OP_RIGHT_PARENTHESIS  shift, and go to state 139
    KW_AND                shift, and go to state 112
    KW_DIV                shift, and go to state 113
    KW_MOD                shift, and go to state 114
    KW_OR                 shift, and go to state 116


State 97

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr
   94          | KW_NOT proc_expr .  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]

    $default  reduce using rule 94 (proc_expr)

    Conflict between rule 94 and token OP_PLUS resolved as reduce (OP_PLUS < KW_NOT).
    Conflict between rule 94 and token OP_MINUS resolved as reduce (OP_MINUS < KW_NOT).
    Conflict between rule 94 and token OP_MULT resolved as reduce (OP_MULT < KW_NOT).
    Conflict between rule 94 and token OP_DIVIDE resolved as reduce (OP_DIVIDE < KW_NOT).
    Conflict between rule 94 and token OP_BIGGER resolved as reduce (OP_BIGGER < KW_NOT).
    Conflict between rule 94 and token OP_SMALLER resolved as reduce (OP_SMALLER < KW_NOT).
    Conflict between rule 94 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < KW_NOT).
    Conflict between rule 94 and token OP_EQUAL resolved as reduce (OP_EQUAL < KW_NOT).
    Conflict between rule 94 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < KW_NOT).
    Conflict between rule 94 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < KW_NOT).
    Conflict between rule 94 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < KW_NOT).
    Conflict between rule 94 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < KW_NOT).
    Conflict between rule 94 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 94 and token KW_DIV resolved as reduce (KW_DIV < KW_NOT).
    Conflict between rule 94 and token KW_MOD resolved as reduce (KW_MOD < KW_NOT).
    Conflict between rule 94 and token KW_OR resolved as reduce (KW_OR < KW_NOT).


State 98

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   97          | id OP_LEFT_PARENTHESIS . proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3
   99 proc_expr_type1: . proc_expr
  100                | . proc_expr_type1 OP_COMMA proc_expr_type1

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id               go to state 69
    pos_int          go to state 70
    real_num         go to state 71
    Str              go to state 72
    bool_const       go to state 73
    proc_expr        go to state 117
    proc_expr_type1  go to state 140


State 99

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_BRACKET, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3
   98          | id OP_LEFT_BRACKET . proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 141


State 100

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   77          | proc_expr OP_PLUS . proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 142


State 101

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   78          | proc_expr OP_MINUS . proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 143


State 102

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   79          | proc_expr OP_MULT . proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 144


State 103

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   80          | proc_expr OP_DIVIDE . proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 145


State 104

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   88          | proc_expr OP_BIGGER . proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 146


State 105

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   89          | proc_expr OP_SMALLER . proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 147


State 106

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   90          | proc_expr OP_DIFFERENT . proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 148


State 107

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   87          | proc_expr OP_EQUAL . proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 149


State 108

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   92          | proc_expr OP_SMALLER_EQUAL . proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 150


State 109

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   91          | proc_expr OP_BIGGER_EQUAL . proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 151


State 110

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   83          | proc_expr OP_LOGICAL_AND . proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 152


State 111

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   85          | proc_expr OP_LOGICAL_OR . proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 153


State 112

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   84          | proc_expr KW_AND . proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 154


State 113

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   81          | proc_expr KW_DIV . proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 155


State 114

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   82          | proc_expr KW_MOD . proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 156


State 115

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   39 proc_body: . KW_BEGIN proc_statements KW_END
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   54 proc_statement_2: . proc_body
   55                 | . proc_statement
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   56           | KW_IF proc_expr KW_THEN . proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   57           | KW_IF proc_expr KW_THEN . proc_statement_2 KW_ELSE proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   65 goto_label: . id OP_COLON label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr

    IDENT      shift, and go to state 4
    KW_BEGIN   shift, and go to state 18
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    id                  go to state 31
    proc_call           go to state 32
    proc_body           go to state 76
    proc_statement      go to state 77
    proc_statement_2    go to state 157
    command_if          go to state 36
    command_repeat      go to state 37
    command_while       go to state 38
    command_goto        go to state 39
    command_return      go to state 40
    command_assignment  go to state 41
    command_for         go to state 42
    goto_label          go to state 43
    command_result      go to state 44


State 116

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   86          | proc_expr KW_OR . proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 158


State 117

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr
   99 proc_expr_type1: proc_expr .  [OP_ASSIGNMENT, OP_COMMA, OP_RIGHT_PARENTHESIS]

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116

    $default  reduce using rule 99 (proc_expr_type1)


State 118

   63 command_for: KW_FOR id proc_expr_type1 . OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | KW_FOR id proc_expr_type1 . OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
  100 proc_expr_type1: proc_expr_type1 . OP_COMMA proc_expr_type1

    OP_ASSIGNMENT  shift, and go to state 159
    OP_COMMA       shift, and go to state 160


State 119

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   58 command_repeat: KW_REPEAT proc_statement_2 KW_UNTIL . proc_expr
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_END, KW_AND, KW_DIV, KW_MOD, KW_ELSE, KW_OR, KW_UNTIL]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 161


State 120

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   39 proc_body: . KW_BEGIN proc_statements KW_END
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   54 proc_statement_2: . proc_body
   55                 | . proc_statement
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   59              | KW_WHILE proc_expr KW_DO . proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   65 goto_label: . id OP_COLON label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr

    IDENT      shift, and go to state 4
    KW_BEGIN   shift, and go to state 18
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    id                  go to state 31
    proc_call           go to state 32
    proc_body           go to state 76
    proc_statement      go to state 77
    proc_statement_2    go to state 162
    command_if          go to state 36
    command_repeat      go to state 37
    command_while       go to state 38
    command_goto        go to state 39
    command_return      go to state 40
    command_assignment  go to state 41
    command_for         go to state 42
    goto_label          go to state 43
    command_result      go to state 44


State 121

   68 label: proc_body .

    $default  reduce using rule 68 (label)


State 122

   69 label: proc_statement .

    $default  reduce using rule 69 (label)


State 123

   65 goto_label: id OP_COLON label .

    $default  reduce using rule 65 (goto_label)


State 124

   21 proc_call: id OP_LEFT_PARENTHESIS arguments . OP_RIGHT_PARENTHESIS proc_expr_type2

    OP_RIGHT_PARENTHESIS  shift, and go to state 163


State 125

   23 arguments: arglist .  [OP_RIGHT_PARENTHESIS]
   25 arglist: arglist . OP_COMMA proc_expr

    OP_COMMA  shift, and go to state 164

    $default  reduce using rule 23 (arguments)


State 126

   24 arglist: proc_expr .  [OP_COMMA, OP_RIGHT_PARENTHESIS]
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116

    $default  reduce using rule 24 (arglist)


State 127

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr
  104 proc_expr_type3: OP_LEFT_BRACKET proc_expr . OP_RIGHT_BRACKET proc_expr_type3

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    OP_RIGHT_BRACKET  shift, and go to state 165
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116


State 128

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   62 command_assignment: id proc_expr_type3 OP_ASSIGNMENT . proc_expr
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_END, KW_AND, KW_DIV, KW_MOD, KW_ELSE, KW_OR, KW_UNTIL]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 166


State 129

   43 proc_statement_list: proc_statement_list OP_SEMICOLON proc_statement .

    $default  reduce using rule 43 (proc_statement_list)


State 130

   15 temp_type: id .

    $default  reduce using rule 15 (temp_type)


State 131

   16 temp_type: pos_int .

    $default  reduce using rule 16 (temp_type)


State 132

   14 dimension: OP_LEFT_BRACKET temp_type . OP_RIGHT_BRACKET dimension

    OP_RIGHT_BRACKET  shift, and go to state 167


State 133

    3 id: . IDENT
   11 array_1_or_multi_dimension: KW_ARRAY dimension KW_OF . data_Type
   12                           | KW_ARRAY dimension KW_OF . id
   17 data_Type: . KW_INTEGER
   18          | . KW_BOOLEAN
   19          | . KW_CHAR
   20          | . KW_REAL

    IDENT       shift, and go to state 4
    KW_BOOLEAN  shift, and go to state 48
    KW_REAL     shift, and go to state 49
    KW_CHAR     shift, and go to state 50
    KW_INTEGER  shift, and go to state 51

    id         go to state 168
    data_Type  go to state 169


State 134

   28 variables2: . %empty  [OP_COLON]
   29           | . OP_COMMA id variables2
   31 variables3: id . variables2 OP_COLON all_data_types OP_SEMICOLON variables3

    OP_COMMA  shift, and go to state 14

    $default  reduce using rule 28 (variables2)

    variables2  go to state 170


State 135

   26 variables: . %empty  [KW_BEGIN, KW_FUNCTION, KW_PROC]
   27          | . KW_VAR id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 variables
   27          | KW_VAR id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 . variables

    KW_VAR  shift, and go to state 7

    $default  reduce using rule 26 (variables)

    variables  go to state 171


State 136

    8 all_data_types: . %empty  [IDENT, OP_SEMICOLON, OP_RIGHT_PARENTHESIS]
    9               | . data_Type
   10               | . array_1_or_multi_dimension
   11 array_1_or_multi_dimension: . KW_ARRAY dimension KW_OF data_Type
   12                           | . KW_ARRAY dimension KW_OF id
   17 data_Type: . KW_INTEGER
   18          | . KW_BOOLEAN
   19          | . KW_CHAR
   20          | . KW_REAL
   36 proc_var_args: id variables2 OP_COLON . all_data_types proc_var_args
   37              | id variables2 OP_COLON . all_data_types OP_SEMICOLON proc_var_args
   38              | id variables2 OP_COLON . all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args

    KW_ARRAY    shift, and go to state 47
    KW_BOOLEAN  shift, and go to state 48
    KW_REAL     shift, and go to state 49
    KW_CHAR     shift, and go to state 50
    KW_INTEGER  shift, and go to state 51

    $default  reduce using rule 8 (all_data_types)

    all_data_types              go to state 172
    array_1_or_multi_dimension  go to state 53
    data_Type                   go to state 54


State 137

    8 all_data_types: . %empty  [OP_SEMICOLON]
    9               | . data_Type
   10               | . array_1_or_multi_dimension
   11 array_1_or_multi_dimension: . KW_ARRAY dimension KW_OF data_Type
   12                           | . KW_ARRAY dimension KW_OF id
   17 data_Type: . KW_INTEGER
   18          | . KW_BOOLEAN
   19          | . KW_CHAR
   20          | . KW_REAL
   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON . all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    KW_ARRAY    shift, and go to state 47
    KW_BOOLEAN  shift, and go to state 48
    KW_REAL     shift, and go to state 49
    KW_CHAR     shift, and go to state 50
    KW_INTEGER  shift, and go to state 51

    $default  reduce using rule 8 (all_data_types)

    all_data_types              go to state 173
    array_1_or_multi_dimension  go to state 53
    data_Type                   go to state 54


State 138

   26 variables: . %empty  [KW_BEGIN, KW_FUNCTION, KW_PROC]
   27          | . KW_VAR id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 variables
   33 proc_func_decl: KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON . variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    KW_VAR  shift, and go to state 7

    $default  reduce using rule 26 (variables)

    variables  go to state 174


State 139

   76 proc_expr: OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS .

    $default  reduce using rule 76 (proc_expr)


State 140

   97 proc_expr: id OP_LEFT_PARENTHESIS proc_expr_type1 . OP_RIGHT_PARENTHESIS proc_expr_type2
  100 proc_expr_type1: proc_expr_type1 . OP_COMMA proc_expr_type1

    OP_COMMA              shift, and go to state 160
    OP_RIGHT_PARENTHESIS  shift, and go to state 175


State 141

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr
   98          | id OP_LEFT_BRACKET proc_expr . OP_RIGHT_BRACKET proc_expr_type3

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    OP_RIGHT_BRACKET  shift, and go to state 176
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116


State 142

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   77          | proc_expr OP_PLUS proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 77 (proc_expr)

    Conflict between rule 77 and token OP_PLUS resolved as shift (%right OP_PLUS).
    Conflict between rule 77 and token OP_MINUS resolved as shift (%right OP_MINUS).
    Conflict between rule 77 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 77 and token OP_DIVIDE resolved as shift (OP_PLUS < OP_DIVIDE).
    Conflict between rule 77 and token OP_BIGGER resolved as reduce (OP_BIGGER < OP_PLUS).
    Conflict between rule 77 and token OP_SMALLER resolved as reduce (OP_SMALLER < OP_PLUS).
    Conflict between rule 77 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < OP_PLUS).
    Conflict between rule 77 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_PLUS).
    Conflict between rule 77 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < OP_PLUS).
    Conflict between rule 77 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < OP_PLUS).
    Conflict between rule 77 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_PLUS).
    Conflict between rule 77 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_PLUS).
    Conflict between rule 77 and token KW_AND resolved as reduce (KW_AND < OP_PLUS).
    Conflict between rule 77 and token KW_DIV resolved as shift (OP_PLUS < KW_DIV).
    Conflict between rule 77 and token KW_MOD resolved as shift (OP_PLUS < KW_MOD).
    Conflict between rule 77 and token KW_OR resolved as reduce (KW_OR < OP_PLUS).


State 143

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   78          | proc_expr OP_MINUS proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 78 (proc_expr)

    Conflict between rule 78 and token OP_PLUS resolved as shift (%right OP_PLUS).
    Conflict between rule 78 and token OP_MINUS resolved as shift (%right OP_MINUS).
    Conflict between rule 78 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 78 and token OP_DIVIDE resolved as shift (OP_MINUS < OP_DIVIDE).
    Conflict between rule 78 and token OP_BIGGER resolved as reduce (OP_BIGGER < OP_MINUS).
    Conflict between rule 78 and token OP_SMALLER resolved as reduce (OP_SMALLER < OP_MINUS).
    Conflict between rule 78 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < OP_MINUS).
    Conflict between rule 78 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_MINUS).
    Conflict between rule 78 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < OP_MINUS).
    Conflict between rule 78 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < OP_MINUS).
    Conflict between rule 78 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_MINUS).
    Conflict between rule 78 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_MINUS).
    Conflict between rule 78 and token KW_AND resolved as reduce (KW_AND < OP_MINUS).
    Conflict between rule 78 and token KW_DIV resolved as shift (OP_MINUS < KW_DIV).
    Conflict between rule 78 and token KW_MOD resolved as shift (OP_MINUS < KW_MOD).
    Conflict between rule 78 and token KW_OR resolved as reduce (KW_OR < OP_MINUS).


State 144

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   79          | proc_expr OP_MULT proc_expr .  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    $default  reduce using rule 79 (proc_expr)

    Conflict between rule 79 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 79 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 79 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 79 and token OP_DIVIDE resolved as reduce (%left OP_DIVIDE).
    Conflict between rule 79 and token OP_BIGGER resolved as reduce (OP_BIGGER < OP_MULT).
    Conflict between rule 79 and token OP_SMALLER resolved as reduce (OP_SMALLER < OP_MULT).
    Conflict between rule 79 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < OP_MULT).
    Conflict between rule 79 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_MULT).
    Conflict between rule 79 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < OP_MULT).
    Conflict between rule 79 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < OP_MULT).
    Conflict between rule 79 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_MULT).
    Conflict between rule 79 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_MULT).
    Conflict between rule 79 and token KW_AND resolved as reduce (KW_AND < OP_MULT).
    Conflict between rule 79 and token KW_DIV resolved as reduce (%left KW_DIV).
    Conflict between rule 79 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 79 and token KW_OR resolved as reduce (KW_OR < OP_MULT).


State 145

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   80          | proc_expr OP_DIVIDE proc_expr .  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    $default  reduce using rule 80 (proc_expr)

    Conflict between rule 80 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIVIDE).
    Conflict between rule 80 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIVIDE).
    Conflict between rule 80 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 80 and token OP_DIVIDE resolved as reduce (%left OP_DIVIDE).
    Conflict between rule 80 and token OP_BIGGER resolved as reduce (OP_BIGGER < OP_DIVIDE).
    Conflict between rule 80 and token OP_SMALLER resolved as reduce (OP_SMALLER < OP_DIVIDE).
    Conflict between rule 80 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < OP_DIVIDE).
    Conflict between rule 80 and token OP_EQUAL resolved as reduce (OP_EQUAL < OP_DIVIDE).
    Conflict between rule 80 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < OP_DIVIDE).
    Conflict between rule 80 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < OP_DIVIDE).
    Conflict between rule 80 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_DIVIDE).
    Conflict between rule 80 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_DIVIDE).
    Conflict between rule 80 and token KW_AND resolved as reduce (KW_AND < OP_DIVIDE).
    Conflict between rule 80 and token KW_DIV resolved as reduce (%left KW_DIV).
    Conflict between rule 80 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 80 and token KW_OR resolved as reduce (KW_OR < OP_DIVIDE).


State 146

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   88          | proc_expr OP_BIGGER proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 88 (proc_expr)

    Conflict between rule 88 and token OP_PLUS resolved as shift (OP_BIGGER < OP_PLUS).
    Conflict between rule 88 and token OP_MINUS resolved as shift (OP_BIGGER < OP_MINUS).
    Conflict between rule 88 and token OP_MULT resolved as shift (OP_BIGGER < OP_MULT).
    Conflict between rule 88 and token OP_DIVIDE resolved as shift (OP_BIGGER < OP_DIVIDE).
    Conflict between rule 88 and token OP_BIGGER resolved as reduce (%left OP_BIGGER).
    Conflict between rule 88 and token OP_SMALLER resolved as reduce (%left OP_SMALLER).
    Conflict between rule 88 and token OP_DIFFERENT resolved as reduce (%left OP_DIFFERENT).
    Conflict between rule 88 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 88 and token OP_SMALLER_EQUAL resolved as reduce (%left OP_SMALLER_EQUAL).
    Conflict between rule 88 and token OP_BIGGER_EQUAL resolved as reduce (%left OP_BIGGER_EQUAL).
    Conflict between rule 88 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_BIGGER).
    Conflict between rule 88 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_BIGGER).
    Conflict between rule 88 and token KW_AND resolved as reduce (KW_AND < OP_BIGGER).
    Conflict between rule 88 and token KW_DIV resolved as shift (OP_BIGGER < KW_DIV).
    Conflict between rule 88 and token KW_MOD resolved as shift (OP_BIGGER < KW_MOD).
    Conflict between rule 88 and token KW_OR resolved as reduce (KW_OR < OP_BIGGER).


State 147

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   89          | proc_expr OP_SMALLER proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 89 (proc_expr)

    Conflict between rule 89 and token OP_PLUS resolved as shift (OP_SMALLER < OP_PLUS).
    Conflict between rule 89 and token OP_MINUS resolved as shift (OP_SMALLER < OP_MINUS).
    Conflict between rule 89 and token OP_MULT resolved as shift (OP_SMALLER < OP_MULT).
    Conflict between rule 89 and token OP_DIVIDE resolved as shift (OP_SMALLER < OP_DIVIDE).
    Conflict between rule 89 and token OP_BIGGER resolved as reduce (%left OP_BIGGER).
    Conflict between rule 89 and token OP_SMALLER resolved as reduce (%left OP_SMALLER).
    Conflict between rule 89 and token OP_DIFFERENT resolved as reduce (%left OP_DIFFERENT).
    Conflict between rule 89 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 89 and token OP_SMALLER_EQUAL resolved as reduce (%left OP_SMALLER_EQUAL).
    Conflict between rule 89 and token OP_BIGGER_EQUAL resolved as reduce (%left OP_BIGGER_EQUAL).
    Conflict between rule 89 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_SMALLER).
    Conflict between rule 89 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_SMALLER).
    Conflict between rule 89 and token KW_AND resolved as reduce (KW_AND < OP_SMALLER).
    Conflict between rule 89 and token KW_DIV resolved as shift (OP_SMALLER < KW_DIV).
    Conflict between rule 89 and token KW_MOD resolved as shift (OP_SMALLER < KW_MOD).
    Conflict between rule 89 and token KW_OR resolved as reduce (KW_OR < OP_SMALLER).


State 148

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   90          | proc_expr OP_DIFFERENT proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 90 (proc_expr)

    Conflict between rule 90 and token OP_PLUS resolved as shift (OP_DIFFERENT < OP_PLUS).
    Conflict between rule 90 and token OP_MINUS resolved as shift (OP_DIFFERENT < OP_MINUS).
    Conflict between rule 90 and token OP_MULT resolved as shift (OP_DIFFERENT < OP_MULT).
    Conflict between rule 90 and token OP_DIVIDE resolved as shift (OP_DIFFERENT < OP_DIVIDE).
    Conflict between rule 90 and token OP_BIGGER resolved as reduce (%left OP_BIGGER).
    Conflict between rule 90 and token OP_SMALLER resolved as reduce (%left OP_SMALLER).
    Conflict between rule 90 and token OP_DIFFERENT resolved as reduce (%left OP_DIFFERENT).
    Conflict between rule 90 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 90 and token OP_SMALLER_EQUAL resolved as reduce (%left OP_SMALLER_EQUAL).
    Conflict between rule 90 and token OP_BIGGER_EQUAL resolved as reduce (%left OP_BIGGER_EQUAL).
    Conflict between rule 90 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_DIFFERENT).
    Conflict between rule 90 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_DIFFERENT).
    Conflict between rule 90 and token KW_AND resolved as reduce (KW_AND < OP_DIFFERENT).
    Conflict between rule 90 and token KW_DIV resolved as shift (OP_DIFFERENT < KW_DIV).
    Conflict between rule 90 and token KW_MOD resolved as shift (OP_DIFFERENT < KW_MOD).
    Conflict between rule 90 and token KW_OR resolved as reduce (KW_OR < OP_DIFFERENT).


State 149

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   87          | proc_expr OP_EQUAL proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 87 (proc_expr)

    Conflict between rule 87 and token OP_PLUS resolved as shift (OP_EQUAL < OP_PLUS).
    Conflict between rule 87 and token OP_MINUS resolved as shift (OP_EQUAL < OP_MINUS).
    Conflict between rule 87 and token OP_MULT resolved as shift (OP_EQUAL < OP_MULT).
    Conflict between rule 87 and token OP_DIVIDE resolved as shift (OP_EQUAL < OP_DIVIDE).
    Conflict between rule 87 and token OP_BIGGER resolved as reduce (%left OP_BIGGER).
    Conflict between rule 87 and token OP_SMALLER resolved as reduce (%left OP_SMALLER).
    Conflict between rule 87 and token OP_DIFFERENT resolved as reduce (%left OP_DIFFERENT).
    Conflict between rule 87 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 87 and token OP_SMALLER_EQUAL resolved as reduce (%left OP_SMALLER_EQUAL).
    Conflict between rule 87 and token OP_BIGGER_EQUAL resolved as reduce (%left OP_BIGGER_EQUAL).
    Conflict between rule 87 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_EQUAL).
    Conflict between rule 87 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_EQUAL).
    Conflict between rule 87 and token KW_AND resolved as reduce (KW_AND < OP_EQUAL).
    Conflict between rule 87 and token KW_DIV resolved as shift (OP_EQUAL < KW_DIV).
    Conflict between rule 87 and token KW_MOD resolved as shift (OP_EQUAL < KW_MOD).
    Conflict between rule 87 and token KW_OR resolved as reduce (KW_OR < OP_EQUAL).


State 150

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr
   92          | proc_expr OP_SMALLER_EQUAL proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 92 (proc_expr)

    Conflict between rule 92 and token OP_PLUS resolved as shift (OP_SMALLER_EQUAL < OP_PLUS).
    Conflict between rule 92 and token OP_MINUS resolved as shift (OP_SMALLER_EQUAL < OP_MINUS).
    Conflict between rule 92 and token OP_MULT resolved as shift (OP_SMALLER_EQUAL < OP_MULT).
    Conflict between rule 92 and token OP_DIVIDE resolved as shift (OP_SMALLER_EQUAL < OP_DIVIDE).
    Conflict between rule 92 and token OP_BIGGER resolved as reduce (%left OP_BIGGER).
    Conflict between rule 92 and token OP_SMALLER resolved as reduce (%left OP_SMALLER).
    Conflict between rule 92 and token OP_DIFFERENT resolved as reduce (%left OP_DIFFERENT).
    Conflict between rule 92 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 92 and token OP_SMALLER_EQUAL resolved as reduce (%left OP_SMALLER_EQUAL).
    Conflict between rule 92 and token OP_BIGGER_EQUAL resolved as reduce (%left OP_BIGGER_EQUAL).
    Conflict between rule 92 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_SMALLER_EQUAL).
    Conflict between rule 92 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_SMALLER_EQUAL).
    Conflict between rule 92 and token KW_AND resolved as reduce (KW_AND < OP_SMALLER_EQUAL).
    Conflict between rule 92 and token KW_DIV resolved as shift (OP_SMALLER_EQUAL < KW_DIV).
    Conflict between rule 92 and token KW_MOD resolved as shift (OP_SMALLER_EQUAL < KW_MOD).
    Conflict between rule 92 and token KW_OR resolved as reduce (KW_OR < OP_SMALLER_EQUAL).


State 151

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   91          | proc_expr OP_BIGGER_EQUAL proc_expr .  [OP_ASSIGNMENT, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS    shift, and go to state 100
    OP_MINUS   shift, and go to state 101
    OP_MULT    shift, and go to state 102
    OP_DIVIDE  shift, and go to state 103
    KW_DIV     shift, and go to state 113
    KW_MOD     shift, and go to state 114

    $default  reduce using rule 91 (proc_expr)

    Conflict between rule 91 and token OP_PLUS resolved as shift (OP_BIGGER_EQUAL < OP_PLUS).
    Conflict between rule 91 and token OP_MINUS resolved as shift (OP_BIGGER_EQUAL < OP_MINUS).
    Conflict between rule 91 and token OP_MULT resolved as shift (OP_BIGGER_EQUAL < OP_MULT).
    Conflict between rule 91 and token OP_DIVIDE resolved as shift (OP_BIGGER_EQUAL < OP_DIVIDE).
    Conflict between rule 91 and token OP_BIGGER resolved as reduce (%left OP_BIGGER).
    Conflict between rule 91 and token OP_SMALLER resolved as reduce (%left OP_SMALLER).
    Conflict between rule 91 and token OP_DIFFERENT resolved as reduce (%left OP_DIFFERENT).
    Conflict between rule 91 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 91 and token OP_SMALLER_EQUAL resolved as reduce (%left OP_SMALLER_EQUAL).
    Conflict between rule 91 and token OP_BIGGER_EQUAL resolved as reduce (%left OP_BIGGER_EQUAL).
    Conflict between rule 91 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < OP_BIGGER_EQUAL).
    Conflict between rule 91 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_BIGGER_EQUAL).
    Conflict between rule 91 and token KW_AND resolved as reduce (KW_AND < OP_BIGGER_EQUAL).
    Conflict between rule 91 and token KW_DIV resolved as shift (OP_BIGGER_EQUAL < KW_DIV).
    Conflict between rule 91 and token KW_MOD resolved as shift (OP_BIGGER_EQUAL < KW_MOD).
    Conflict between rule 91 and token KW_OR resolved as reduce (KW_OR < OP_BIGGER_EQUAL).


State 152

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   83          | proc_expr OP_LOGICAL_AND proc_expr .  [OP_ASSIGNMENT, OP_SEMICOLON, OP_COMMA, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114

    $default  reduce using rule 83 (proc_expr)

    Conflict between rule 83 and token OP_PLUS resolved as shift (OP_LOGICAL_AND < OP_PLUS).
    Conflict between rule 83 and token OP_MINUS resolved as shift (OP_LOGICAL_AND < OP_MINUS).
    Conflict between rule 83 and token OP_MULT resolved as shift (OP_LOGICAL_AND < OP_MULT).
    Conflict between rule 83 and token OP_DIVIDE resolved as shift (OP_LOGICAL_AND < OP_DIVIDE).
    Conflict between rule 83 and token OP_BIGGER resolved as shift (OP_LOGICAL_AND < OP_BIGGER).
    Conflict between rule 83 and token OP_SMALLER resolved as shift (OP_LOGICAL_AND < OP_SMALLER).
    Conflict between rule 83 and token OP_DIFFERENT resolved as shift (OP_LOGICAL_AND < OP_DIFFERENT).
    Conflict between rule 83 and token OP_EQUAL resolved as shift (OP_LOGICAL_AND < OP_EQUAL).
    Conflict between rule 83 and token OP_SMALLER_EQUAL resolved as shift (OP_LOGICAL_AND < OP_SMALLER_EQUAL).
    Conflict between rule 83 and token OP_BIGGER_EQUAL resolved as shift (OP_LOGICAL_AND < OP_BIGGER_EQUAL).
    Conflict between rule 83 and token OP_LOGICAL_AND resolved as reduce (%left OP_LOGICAL_AND).
    Conflict between rule 83 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < OP_LOGICAL_AND).
    Conflict between rule 83 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 83 and token KW_DIV resolved as shift (OP_LOGICAL_AND < KW_DIV).
    Conflict between rule 83 and token KW_MOD resolved as shift (OP_LOGICAL_AND < KW_MOD).
    Conflict between rule 83 and token KW_OR resolved as reduce (KW_OR < OP_LOGICAL_AND).


State 153

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   85          | proc_expr OP_LOGICAL_OR proc_expr .  [OP_ASSIGNMENT, OP_SEMICOLON, OP_COMMA, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114

    $default  reduce using rule 85 (proc_expr)

    Conflict between rule 85 and token OP_PLUS resolved as shift (OP_LOGICAL_OR < OP_PLUS).
    Conflict between rule 85 and token OP_MINUS resolved as shift (OP_LOGICAL_OR < OP_MINUS).
    Conflict between rule 85 and token OP_MULT resolved as shift (OP_LOGICAL_OR < OP_MULT).
    Conflict between rule 85 and token OP_DIVIDE resolved as shift (OP_LOGICAL_OR < OP_DIVIDE).
    Conflict between rule 85 and token OP_BIGGER resolved as shift (OP_LOGICAL_OR < OP_BIGGER).
    Conflict between rule 85 and token OP_SMALLER resolved as shift (OP_LOGICAL_OR < OP_SMALLER).
    Conflict between rule 85 and token OP_DIFFERENT resolved as shift (OP_LOGICAL_OR < OP_DIFFERENT).
    Conflict between rule 85 and token OP_EQUAL resolved as shift (OP_LOGICAL_OR < OP_EQUAL).
    Conflict between rule 85 and token OP_SMALLER_EQUAL resolved as shift (OP_LOGICAL_OR < OP_SMALLER_EQUAL).
    Conflict between rule 85 and token OP_BIGGER_EQUAL resolved as shift (OP_LOGICAL_OR < OP_BIGGER_EQUAL).
    Conflict between rule 85 and token OP_LOGICAL_AND resolved as shift (OP_LOGICAL_OR < OP_LOGICAL_AND).
    Conflict between rule 85 and token OP_LOGICAL_OR resolved as reduce (%left OP_LOGICAL_OR).
    Conflict between rule 85 and token KW_AND resolved as shift (OP_LOGICAL_OR < KW_AND).
    Conflict between rule 85 and token KW_DIV resolved as shift (OP_LOGICAL_OR < KW_DIV).
    Conflict between rule 85 and token KW_MOD resolved as shift (OP_LOGICAL_OR < KW_MOD).
    Conflict between rule 85 and token KW_OR resolved as reduce (%left KW_OR).


State 154

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   84          | proc_expr KW_AND proc_expr .  [OP_ASSIGNMENT, OP_SEMICOLON, OP_COMMA, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114

    $default  reduce using rule 84 (proc_expr)

    Conflict between rule 84 and token OP_PLUS resolved as shift (KW_AND < OP_PLUS).
    Conflict between rule 84 and token OP_MINUS resolved as shift (KW_AND < OP_MINUS).
    Conflict between rule 84 and token OP_MULT resolved as shift (KW_AND < OP_MULT).
    Conflict between rule 84 and token OP_DIVIDE resolved as shift (KW_AND < OP_DIVIDE).
    Conflict between rule 84 and token OP_BIGGER resolved as shift (KW_AND < OP_BIGGER).
    Conflict between rule 84 and token OP_SMALLER resolved as shift (KW_AND < OP_SMALLER).
    Conflict between rule 84 and token OP_DIFFERENT resolved as shift (KW_AND < OP_DIFFERENT).
    Conflict between rule 84 and token OP_EQUAL resolved as shift (KW_AND < OP_EQUAL).
    Conflict between rule 84 and token OP_SMALLER_EQUAL resolved as shift (KW_AND < OP_SMALLER_EQUAL).
    Conflict between rule 84 and token OP_BIGGER_EQUAL resolved as shift (KW_AND < OP_BIGGER_EQUAL).
    Conflict between rule 84 and token OP_LOGICAL_AND resolved as reduce (%left OP_LOGICAL_AND).
    Conflict between rule 84 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < KW_AND).
    Conflict between rule 84 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 84 and token KW_DIV resolved as shift (KW_AND < KW_DIV).
    Conflict between rule 84 and token KW_MOD resolved as shift (KW_AND < KW_MOD).
    Conflict between rule 84 and token KW_OR resolved as reduce (KW_OR < KW_AND).


State 155

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   81          | proc_expr KW_DIV proc_expr .  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    $default  reduce using rule 81 (proc_expr)

    Conflict between rule 81 and token OP_PLUS resolved as reduce (OP_PLUS < KW_DIV).
    Conflict between rule 81 and token OP_MINUS resolved as reduce (OP_MINUS < KW_DIV).
    Conflict between rule 81 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 81 and token OP_DIVIDE resolved as reduce (%left OP_DIVIDE).
    Conflict between rule 81 and token OP_BIGGER resolved as reduce (OP_BIGGER < KW_DIV).
    Conflict between rule 81 and token OP_SMALLER resolved as reduce (OP_SMALLER < KW_DIV).
    Conflict between rule 81 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < KW_DIV).
    Conflict between rule 81 and token OP_EQUAL resolved as reduce (OP_EQUAL < KW_DIV).
    Conflict between rule 81 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < KW_DIV).
    Conflict between rule 81 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < KW_DIV).
    Conflict between rule 81 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < KW_DIV).
    Conflict between rule 81 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < KW_DIV).
    Conflict between rule 81 and token KW_AND resolved as reduce (KW_AND < KW_DIV).
    Conflict between rule 81 and token KW_DIV resolved as reduce (%left KW_DIV).
    Conflict between rule 81 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 81 and token KW_OR resolved as reduce (KW_OR < KW_DIV).


State 156

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   82          | proc_expr KW_MOD proc_expr .  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    $default  reduce using rule 82 (proc_expr)

    Conflict between rule 82 and token OP_PLUS resolved as reduce (OP_PLUS < KW_MOD).
    Conflict between rule 82 and token OP_MINUS resolved as reduce (OP_MINUS < KW_MOD).
    Conflict between rule 82 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 82 and token OP_DIVIDE resolved as reduce (%left OP_DIVIDE).
    Conflict between rule 82 and token OP_BIGGER resolved as reduce (OP_BIGGER < KW_MOD).
    Conflict between rule 82 and token OP_SMALLER resolved as reduce (OP_SMALLER < KW_MOD).
    Conflict between rule 82 and token OP_DIFFERENT resolved as reduce (OP_DIFFERENT < KW_MOD).
    Conflict between rule 82 and token OP_EQUAL resolved as reduce (OP_EQUAL < KW_MOD).
    Conflict between rule 82 and token OP_SMALLER_EQUAL resolved as reduce (OP_SMALLER_EQUAL < KW_MOD).
    Conflict between rule 82 and token OP_BIGGER_EQUAL resolved as reduce (OP_BIGGER_EQUAL < KW_MOD).
    Conflict between rule 82 and token OP_LOGICAL_AND resolved as reduce (OP_LOGICAL_AND < KW_MOD).
    Conflict between rule 82 and token OP_LOGICAL_OR resolved as reduce (OP_LOGICAL_OR < KW_MOD).
    Conflict between rule 82 and token KW_AND resolved as reduce (KW_AND < KW_MOD).
    Conflict between rule 82 and token KW_DIV resolved as reduce (%left KW_DIV).
    Conflict between rule 82 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 82 and token KW_OR resolved as reduce (KW_OR < KW_MOD).


State 157

   56 command_if: KW_IF proc_expr KW_THEN proc_statement_2 .  [OP_SEMICOLON, KW_END, KW_UNTIL]
   57           | KW_IF proc_expr KW_THEN proc_statement_2 . KW_ELSE proc_statement_2

    KW_ELSE  shift, and go to state 177

    $default  reduce using rule 56 (command_if)

    Conflict between rule 56 and token KW_ELSE resolved as shift (%right KW_ELSE).


State 158

   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   86          | proc_expr KW_OR proc_expr .  [OP_ASSIGNMENT, OP_SEMICOLON, OP_COMMA, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114

    $default  reduce using rule 86 (proc_expr)

    Conflict between rule 86 and token OP_PLUS resolved as shift (KW_OR < OP_PLUS).
    Conflict between rule 86 and token OP_MINUS resolved as shift (KW_OR < OP_MINUS).
    Conflict between rule 86 and token OP_MULT resolved as shift (KW_OR < OP_MULT).
    Conflict between rule 86 and token OP_DIVIDE resolved as shift (KW_OR < OP_DIVIDE).
    Conflict between rule 86 and token OP_BIGGER resolved as shift (KW_OR < OP_BIGGER).
    Conflict between rule 86 and token OP_SMALLER resolved as shift (KW_OR < OP_SMALLER).
    Conflict between rule 86 and token OP_DIFFERENT resolved as shift (KW_OR < OP_DIFFERENT).
    Conflict between rule 86 and token OP_EQUAL resolved as shift (KW_OR < OP_EQUAL).
    Conflict between rule 86 and token OP_SMALLER_EQUAL resolved as shift (KW_OR < OP_SMALLER_EQUAL).
    Conflict between rule 86 and token OP_BIGGER_EQUAL resolved as shift (KW_OR < OP_BIGGER_EQUAL).
    Conflict between rule 86 and token OP_LOGICAL_AND resolved as shift (KW_OR < OP_LOGICAL_AND).
    Conflict between rule 86 and token OP_LOGICAL_OR resolved as reduce (%left OP_LOGICAL_OR).
    Conflict between rule 86 and token KW_AND resolved as shift (KW_OR < KW_AND).
    Conflict between rule 86 and token KW_DIV resolved as shift (KW_OR < KW_DIV).
    Conflict between rule 86 and token KW_MOD resolved as shift (KW_OR < KW_MOD).
    Conflict between rule 86 and token KW_OR resolved as reduce (%left KW_OR).


State 159

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   63 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT . proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | KW_FOR id proc_expr_type1 OP_ASSIGNMENT . proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_AND, KW_DIV, KW_MOD, KW_OR, KW_TO, KW_DOWNTO]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 178


State 160

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3
   99 proc_expr_type1: . proc_expr
  100                | . proc_expr_type1 OP_COMMA proc_expr_type1
  100                | proc_expr_type1 OP_COMMA . proc_expr_type1

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id               go to state 69
    pos_int          go to state 70
    real_num         go to state 71
    Str              go to state 72
    bool_const       go to state 73
    proc_expr        go to state 117
    proc_expr_type1  go to state 179


State 161

   58 command_repeat: KW_REPEAT proc_statement_2 KW_UNTIL proc_expr .  [OP_SEMICOLON, KW_END, KW_ELSE, KW_UNTIL]
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116

    $default  reduce using rule 58 (command_repeat)


State 162

   59 command_while: KW_WHILE proc_expr KW_DO proc_statement_2 .

    $default  reduce using rule 59 (command_while)


State 163

   21 proc_call: id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS . proc_expr_type2
  101 proc_expr_type2: . %empty  [OP_SEMICOLON, KW_END, KW_ELSE, KW_UNTIL]
  102                | . OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2

    OP_LEFT_PARENTHESIS  shift, and go to state 180

    $default  reduce using rule 101 (proc_expr_type2)

    proc_expr_type2  go to state 181


State 164

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   25 arglist: arglist OP_COMMA . proc_expr
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 182


State 165

  103 proc_expr_type3: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
  104                | . OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3
  104                | OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET . proc_expr_type3

    OP_LEFT_BRACKET  shift, and go to state 82

    $default  reduce using rule 103 (proc_expr_type3)

    proc_expr_type3  go to state 183


State 166

   62 command_assignment: id proc_expr_type3 OP_ASSIGNMENT proc_expr .  [OP_SEMICOLON, KW_END, KW_ELSE, KW_UNTIL]
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116

    $default  reduce using rule 62 (command_assignment)


State 167

   13 dimension: . %empty  [KW_OF]
   14          | . OP_LEFT_BRACKET temp_type OP_RIGHT_BRACKET dimension
   14          | OP_LEFT_BRACKET temp_type OP_RIGHT_BRACKET . dimension

    OP_LEFT_BRACKET  shift, and go to state 86

    $default  reduce using rule 13 (dimension)

    dimension  go to state 184


State 168

   12 array_1_or_multi_dimension: KW_ARRAY dimension KW_OF id .

    $default  reduce using rule 12 (array_1_or_multi_dimension)


State 169

   11 array_1_or_multi_dimension: KW_ARRAY dimension KW_OF data_Type .

    $default  reduce using rule 11 (array_1_or_multi_dimension)


State 170

   31 variables3: id variables2 . OP_COLON all_data_types OP_SEMICOLON variables3

    OP_COLON  shift, and go to state 185


State 171

   27 variables: KW_VAR id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 variables .

    $default  reduce using rule 27 (variables)


State 172

    3 id: . IDENT
   35 proc_var_args: . %empty  [OP_RIGHT_PARENTHESIS]
   36              | . id variables2 OP_COLON all_data_types proc_var_args
   36              | id variables2 OP_COLON all_data_types . proc_var_args
   37              | . id variables2 OP_COLON all_data_types OP_SEMICOLON proc_var_args
   37              | id variables2 OP_COLON all_data_types . OP_SEMICOLON proc_var_args
   38              | . id variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args
   38              | id variables2 OP_COLON all_data_types . OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args

    IDENT         shift, and go to state 4
    OP_SEMICOLON  shift, and go to state 186

    $default  reduce using rule 35 (proc_var_args)

    id             go to state 55
    proc_var_args  go to state 187


State 173

   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types . OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    OP_SEMICOLON  shift, and go to state 188


State 174

   32 proc_func_decl: . %empty  [KW_BEGIN]
   33               | . KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   33               | KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables . proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   34               | . KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    KW_FUNCTION  shift, and go to state 11
    KW_PROC      shift, and go to state 12

    $default  reduce using rule 32 (proc_func_decl)

    proc_func_decl  go to state 189


State 175

   97 proc_expr: id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS . proc_expr_type2
  101 proc_expr_type2: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
  102                | . OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2

    OP_LEFT_PARENTHESIS  shift, and go to state 180

    $default  reduce using rule 101 (proc_expr_type2)

    proc_expr_type2  go to state 190


State 176

   98 proc_expr: id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET . proc_expr_type3
  103 proc_expr_type3: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
  104                | . OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    OP_LEFT_BRACKET  shift, and go to state 82

    $default  reduce using rule 103 (proc_expr_type3)

    proc_expr_type3  go to state 191


State 177

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   39 proc_body: . KW_BEGIN proc_statements KW_END
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   54 proc_statement_2: . proc_body
   55                 | . proc_statement
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   57           | KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE . proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   65 goto_label: . id OP_COLON label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr

    IDENT      shift, and go to state 4
    KW_BEGIN   shift, and go to state 18
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    id                  go to state 31
    proc_call           go to state 32
    proc_body           go to state 76
    proc_statement      go to state 77
    proc_statement_2    go to state 192
    command_if          go to state 36
    command_repeat      go to state 37
    command_while       go to state 38
    command_goto        go to state 39
    command_return      go to state 40
    command_assignment  go to state 41
    command_for         go to state 42
    goto_label          go to state 43
    command_result      go to state 44


State 178

   63 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr . KW_TO proc_expr KW_DO proc_statement_2
   64            | KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr . KW_DOWNTO proc_expr KW_DO proc_statement_2
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116
    KW_TO             shift, and go to state 193
    KW_DOWNTO         shift, and go to state 194


State 179

  100 proc_expr_type1: proc_expr_type1 . OP_COMMA proc_expr_type1
  100                | proc_expr_type1 OP_COMMA proc_expr_type1 .  [OP_ASSIGNMENT, OP_COMMA, OP_RIGHT_PARENTHESIS]

    $default  reduce using rule 100 (proc_expr_type1)

    Conflict between rule 100 and token OP_COMMA resolved as reduce (%left OP_COMMA).


State 180

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, KW_AND, KW_DIV, KW_MOD, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3
   99 proc_expr_type1: . proc_expr
  100                | . proc_expr_type1 OP_COMMA proc_expr_type1
  102 proc_expr_type2: OP_LEFT_PARENTHESIS . proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id               go to state 69
    pos_int          go to state 70
    real_num         go to state 71
    Str              go to state 72
    bool_const       go to state 73
    proc_expr        go to state 117
    proc_expr_type1  go to state 195


State 181

   21 proc_call: id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2 .

    $default  reduce using rule 21 (proc_call)


State 182

   25 arglist: arglist OP_COMMA proc_expr .  [OP_COMMA, OP_RIGHT_PARENTHESIS]
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_OR             shift, and go to state 116

    $default  reduce using rule 25 (arglist)


State 183

  104 proc_expr_type3: OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3 .

    $default  reduce using rule 104 (proc_expr_type3)


State 184

   14 dimension: OP_LEFT_BRACKET temp_type OP_RIGHT_BRACKET dimension .

    $default  reduce using rule 14 (dimension)


State 185

    8 all_data_types: . %empty  [OP_SEMICOLON]
    9               | . data_Type
   10               | . array_1_or_multi_dimension
   11 array_1_or_multi_dimension: . KW_ARRAY dimension KW_OF data_Type
   12                           | . KW_ARRAY dimension KW_OF id
   17 data_Type: . KW_INTEGER
   18          | . KW_BOOLEAN
   19          | . KW_CHAR
   20          | . KW_REAL
   31 variables3: id variables2 OP_COLON . all_data_types OP_SEMICOLON variables3

    KW_ARRAY    shift, and go to state 47
    KW_BOOLEAN  shift, and go to state 48
    KW_REAL     shift, and go to state 49
    KW_CHAR     shift, and go to state 50
    KW_INTEGER  shift, and go to state 51

    $default  reduce using rule 8 (all_data_types)

    all_data_types              go to state 196
    array_1_or_multi_dimension  go to state 53
    data_Type                   go to state 54


State 186

    3 id: . IDENT
   35 proc_var_args: . %empty  [OP_RIGHT_PARENTHESIS]
   36              | . id variables2 OP_COLON all_data_types proc_var_args
   37              | . id variables2 OP_COLON all_data_types OP_SEMICOLON proc_var_args
   37              | id variables2 OP_COLON all_data_types OP_SEMICOLON . proc_var_args
   38              | . id variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args
   38              | id variables2 OP_COLON all_data_types OP_SEMICOLON . OP_RIGHT_PARENTHESIS proc_var_args

    IDENT                 shift, and go to state 4
    OP_RIGHT_PARENTHESIS  shift, and go to state 197

    OP_RIGHT_PARENTHESIS  [reduce using rule 35 (proc_var_args)]

    id             go to state 55
    proc_var_args  go to state 198


State 187

   36 proc_var_args: id variables2 OP_COLON all_data_types proc_var_args .

    $default  reduce using rule 36 (proc_var_args)


State 188

   26 variables: . %empty  [KW_BEGIN, KW_FUNCTION, KW_PROC]
   27          | . KW_VAR id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 variables
   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON . variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    KW_VAR  shift, and go to state 7

    $default  reduce using rule 26 (variables)

    variables  go to state 199


State 189

   33 proc_func_decl: KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl . proc_body OP_SEMICOLON proc_func_decl
   39 proc_body: . KW_BEGIN proc_statements KW_END

    KW_BEGIN  shift, and go to state 18

    proc_body  go to state 200


State 190

   97 proc_expr: id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2 .

    $default  reduce using rule 97 (proc_expr)


State 191

   98 proc_expr: id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3 .

    $default  reduce using rule 98 (proc_expr)


State 192

   57 command_if: KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2 .

    $default  reduce using rule 57 (command_if)


State 193

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   63 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO . proc_expr KW_DO proc_statement_2
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 201


State 194

    3 id: . IDENT
    4 pos_int: . POSINT
    5 real_num: . REAL
    6 Str: . STRING
    7 bool_const: . BOOLEAN_CONSTANT
   64 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO . proc_expr KW_DO proc_statement_2
   70 proc_expr: . %empty  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_OR]
   71          | . Str
   72          | . pos_int
   73          | . real_num
   74          | . bool_const
   75          | . id
   76          | . OP_LEFT_PARENTHESIS proc_expr OP_RIGHT_PARENTHESIS
   77          | . proc_expr OP_PLUS proc_expr
   78          | . proc_expr OP_MINUS proc_expr
   79          | . proc_expr OP_MULT proc_expr
   80          | . proc_expr OP_DIVIDE proc_expr
   81          | . proc_expr KW_DIV proc_expr
   82          | . proc_expr KW_MOD proc_expr
   83          | . proc_expr OP_LOGICAL_AND proc_expr
   84          | . proc_expr KW_AND proc_expr
   85          | . proc_expr OP_LOGICAL_OR proc_expr
   86          | . proc_expr KW_OR proc_expr
   87          | . proc_expr OP_EQUAL proc_expr
   88          | . proc_expr OP_BIGGER proc_expr
   89          | . proc_expr OP_SMALLER proc_expr
   90          | . proc_expr OP_DIFFERENT proc_expr
   91          | . proc_expr OP_BIGGER_EQUAL proc_expr
   92          | . proc_expr OP_SMALLER_EQUAL proc_expr
   93          | . OP_LOGICAL_NOT proc_expr
   94          | . KW_NOT proc_expr
   95          | . OP_PLUS proc_expr
   96          | . OP_MINUS proc_expr
   97          | . id OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
   98          | . id OP_LEFT_BRACKET proc_expr OP_RIGHT_BRACKET proc_expr_type3

    IDENT                shift, and go to state 4
    POSINT               shift, and go to state 60
    REAL                 shift, and go to state 61
    STRING               shift, and go to state 62
    BOOLEAN_CONSTANT     shift, and go to state 63
    OP_PLUS              shift, and go to state 64
    OP_MINUS             shift, and go to state 65
    OP_LOGICAL_NOT       shift, and go to state 66
    OP_LEFT_PARENTHESIS  shift, and go to state 67
    KW_NOT               shift, and go to state 68

    OP_PLUS   [reduce using rule 70 (proc_expr)]
    OP_MINUS  [reduce using rule 70 (proc_expr)]
    $default  reduce using rule 70 (proc_expr)

    id          go to state 69
    pos_int     go to state 70
    real_num    go to state 71
    Str         go to state 72
    bool_const  go to state 73
    proc_expr   go to state 202


State 195

  100 proc_expr_type1: proc_expr_type1 . OP_COMMA proc_expr_type1
  102 proc_expr_type2: OP_LEFT_PARENTHESIS proc_expr_type1 . OP_RIGHT_PARENTHESIS proc_expr_type2

    OP_COMMA              shift, and go to state 160
    OP_RIGHT_PARENTHESIS  shift, and go to state 203


State 196

   31 variables3: id variables2 OP_COLON all_data_types . OP_SEMICOLON variables3

    OP_SEMICOLON  shift, and go to state 204


State 197

    3 id: . IDENT
   35 proc_var_args: . %empty  [OP_RIGHT_PARENTHESIS]
   36              | . id variables2 OP_COLON all_data_types proc_var_args
   37              | . id variables2 OP_COLON all_data_types OP_SEMICOLON proc_var_args
   38              | . id variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args
   38              | id variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS . proc_var_args

    IDENT  shift, and go to state 4

    $default  reduce using rule 35 (proc_var_args)

    id             go to state 55
    proc_var_args  go to state 205


State 198

   37 proc_var_args: id variables2 OP_COLON all_data_types OP_SEMICOLON proc_var_args .

    $default  reduce using rule 37 (proc_var_args)


State 199

   32 proc_func_decl: . %empty  [KW_BEGIN]
   33               | . KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   34               | . KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   34               | KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables . proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    KW_FUNCTION  shift, and go to state 11
    KW_PROC      shift, and go to state 12

    $default  reduce using rule 32 (proc_func_decl)

    proc_func_decl  go to state 206


State 200

   33 proc_func_decl: KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body . OP_SEMICOLON proc_func_decl

    OP_SEMICOLON  shift, and go to state 207


State 201

   63 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr . KW_DO proc_statement_2
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_DO             shift, and go to state 208
    KW_OR             shift, and go to state 116


State 202

   64 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr . KW_DO proc_statement_2
   77 proc_expr: proc_expr . OP_PLUS proc_expr
   78          | proc_expr . OP_MINUS proc_expr
   79          | proc_expr . OP_MULT proc_expr
   80          | proc_expr . OP_DIVIDE proc_expr
   81          | proc_expr . KW_DIV proc_expr
   82          | proc_expr . KW_MOD proc_expr
   83          | proc_expr . OP_LOGICAL_AND proc_expr
   84          | proc_expr . KW_AND proc_expr
   85          | proc_expr . OP_LOGICAL_OR proc_expr
   86          | proc_expr . KW_OR proc_expr
   87          | proc_expr . OP_EQUAL proc_expr
   88          | proc_expr . OP_BIGGER proc_expr
   89          | proc_expr . OP_SMALLER proc_expr
   90          | proc_expr . OP_DIFFERENT proc_expr
   91          | proc_expr . OP_BIGGER_EQUAL proc_expr
   92          | proc_expr . OP_SMALLER_EQUAL proc_expr

    OP_PLUS           shift, and go to state 100
    OP_MINUS          shift, and go to state 101
    OP_MULT           shift, and go to state 102
    OP_DIVIDE         shift, and go to state 103
    OP_BIGGER         shift, and go to state 104
    OP_SMALLER        shift, and go to state 105
    OP_DIFFERENT      shift, and go to state 106
    OP_EQUAL          shift, and go to state 107
    OP_SMALLER_EQUAL  shift, and go to state 108
    OP_BIGGER_EQUAL   shift, and go to state 109
    OP_LOGICAL_AND    shift, and go to state 110
    OP_LOGICAL_OR     shift, and go to state 111
    KW_AND            shift, and go to state 112
    KW_DIV            shift, and go to state 113
    KW_MOD            shift, and go to state 114
    KW_DO             shift, and go to state 209
    KW_OR             shift, and go to state 116


State 203

  101 proc_expr_type2: . %empty  [OP_ASSIGNMENT, OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_BIGGER, OP_SMALLER, OP_DIFFERENT, OP_EQUAL, OP_SEMICOLON, OP_COMMA, OP_SMALLER_EQUAL, OP_BIGGER_EQUAL, OP_LOGICAL_AND, OP_LOGICAL_OR, OP_RIGHT_PARENTHESIS, OP_RIGHT_BRACKET, KW_END, KW_AND, KW_DIV, KW_MOD, KW_DO, KW_ELSE, KW_THEN, KW_OR, KW_UNTIL, KW_TO, KW_DOWNTO]
  102                | . OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2
  102                | OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS . proc_expr_type2

    OP_LEFT_PARENTHESIS  shift, and go to state 180

    $default  reduce using rule 101 (proc_expr_type2)

    proc_expr_type2  go to state 210


State 204

    3 id: . IDENT
   30 variables3: . %empty  [KW_BEGIN, KW_FUNCTION, KW_PROC, KW_VAR]
   31           | . id variables2 OP_COLON all_data_types OP_SEMICOLON variables3
   31           | id variables2 OP_COLON all_data_types OP_SEMICOLON . variables3

    IDENT  shift, and go to state 4

    $default  reduce using rule 30 (variables3)

    id          go to state 134
    variables3  go to state 211


State 205

   38 proc_var_args: id variables2 OP_COLON all_data_types OP_SEMICOLON OP_RIGHT_PARENTHESIS proc_var_args .

    $default  reduce using rule 38 (proc_var_args)


State 206

   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl . proc_body OP_SEMICOLON proc_func_decl
   39 proc_body: . KW_BEGIN proc_statements KW_END

    KW_BEGIN  shift, and go to state 18

    proc_body  go to state 212


State 207

   32 proc_func_decl: . %empty  [KW_BEGIN]
   33               | . KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   33               | KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON . proc_func_decl
   34               | . KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl

    KW_FUNCTION  shift, and go to state 11
    KW_PROC      shift, and go to state 12

    $default  reduce using rule 32 (proc_func_decl)

    proc_func_decl  go to state 213


State 208

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   39 proc_body: . KW_BEGIN proc_statements KW_END
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   54 proc_statement_2: . proc_body
   55                 | . proc_statement
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   63            | KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO . proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   65 goto_label: . id OP_COLON label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr

    IDENT      shift, and go to state 4
    KW_BEGIN   shift, and go to state 18
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    id                  go to state 31
    proc_call           go to state 32
    proc_body           go to state 76
    proc_statement      go to state 77
    proc_statement_2    go to state 214
    command_if          go to state 36
    command_repeat      go to state 37
    command_while       go to state 38
    command_goto        go to state 39
    command_return      go to state 40
    command_assignment  go to state 41
    command_for         go to state 42
    goto_label          go to state 43
    command_result      go to state 44


State 209

    3 id: . IDENT
   21 proc_call: . id OP_LEFT_PARENTHESIS arguments OP_RIGHT_PARENTHESIS proc_expr_type2
   39 proc_body: . KW_BEGIN proc_statements KW_END
   44 proc_statement: . command_assignment
   45               | . command_result
   46               | . proc_call
   47               | . command_repeat
   48               | . command_while
   49               | . command_for
   50               | . command_if
   51               | . command_return
   52               | . command_goto
   53               | . goto_label
   54 proc_statement_2: . proc_body
   55                 | . proc_statement
   56 command_if: . KW_IF proc_expr KW_THEN proc_statement_2
   57           | . KW_IF proc_expr KW_THEN proc_statement_2 KW_ELSE proc_statement_2
   58 command_repeat: . KW_REPEAT proc_statement_2 KW_UNTIL proc_expr
   59 command_while: . KW_WHILE proc_expr KW_DO proc_statement_2
   60 command_goto: . KW_GOTO id
   61 command_return: . KW_RETURN
   62 command_assignment: . id proc_expr_type3 OP_ASSIGNMENT proc_expr
   63 command_for: . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2
   64            | . KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2
   64            | KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO . proc_statement_2
   65 goto_label: . id OP_COLON label
   66 command_result: . KW_RESULT OP_ASSIGNMENT proc_expr

    IDENT      shift, and go to state 4
    KW_BEGIN   shift, and go to state 18
    KW_RESULT  shift, and go to state 24
    KW_GOTO    shift, and go to state 25
    KW_RETURN  shift, and go to state 26
    KW_IF      shift, and go to state 27
    KW_FOR     shift, and go to state 28
    KW_REPEAT  shift, and go to state 29
    KW_WHILE   shift, and go to state 30

    id                  go to state 31
    proc_call           go to state 32
    proc_body           go to state 76
    proc_statement      go to state 77
    proc_statement_2    go to state 215
    command_if          go to state 36
    command_repeat      go to state 37
    command_while       go to state 38
    command_goto        go to state 39
    command_return      go to state 40
    command_assignment  go to state 41
    command_for         go to state 42
    goto_label          go to state 43
    command_result      go to state 44


State 210

  102 proc_expr_type2: OP_LEFT_PARENTHESIS proc_expr_type1 OP_RIGHT_PARENTHESIS proc_expr_type2 .

    $default  reduce using rule 102 (proc_expr_type2)


State 211

   31 variables3: id variables2 OP_COLON all_data_types OP_SEMICOLON variables3 .

    $default  reduce using rule 31 (variables3)


State 212

   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body . OP_SEMICOLON proc_func_decl

    OP_SEMICOLON  shift, and go to state 216


State 213

   33 proc_func_decl: KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl .

    $default  reduce using rule 33 (proc_func_decl)


State 214

   63 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_TO proc_expr KW_DO proc_statement_2 .

    $default  reduce using rule 63 (command_for)


State 215

   64 command_for: KW_FOR id proc_expr_type1 OP_ASSIGNMENT proc_expr KW_DOWNTO proc_expr KW_DO proc_statement_2 .

    $default  reduce using rule 64 (command_for)


State 216

   32 proc_func_decl: . %empty  [KW_BEGIN]
   33               | . KW_PROC id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   34               | . KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl
   34               | KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON . proc_func_decl

    KW_FUNCTION  shift, and go to state 11
    KW_PROC      shift, and go to state 12

    $default  reduce using rule 32 (proc_func_decl)

    proc_func_decl  go to state 217


State 217

   34 proc_func_decl: KW_FUNCTION id OP_LEFT_PARENTHESIS proc_var_args OP_RIGHT_PARENTHESIS OP_COLON all_data_types OP_SEMICOLON variables proc_func_decl proc_body OP_SEMICOLON proc_func_decl .

    $default  reduce using rule 34 (proc_func_decl)
